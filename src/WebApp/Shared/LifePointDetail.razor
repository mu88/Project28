@using Logging.Extensions
@using BusinessServices.Services
@using DTO.LifePoint
@using Microsoft.Extensions.Logging
@inject ILifePointService LifePointService
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigator
@inject IStringLocalizer<Main> Loc
@inject ILogger<LifePointDetail> Logger

<div class="card">
    @if (_imageUri != null)
    {
        <img src="@_imageUri" alt="The image" @onload="UpdatePopupAsync"> // don't apply class or style - it will break the popup sizing 
    }
    <div class="card-body">
        <h5 class="card-title">@_lifePoint.Caption</h5>
        <h6 class="card-subtitle mb-2 text-muted">@Loc["On"] @_lifePoint.Date @Loc["With"] @_lifePoint.CreatedBy.Name</h6>
        @if (_lifePoint.Description != null)
        {
            <p class="card-text" style="white-space: pre-line">@_lifePoint.Description</p>
        }
        <button class="btn btn-outline-secondary" @onclick="OnDeleteClicked">@Loc["Delete"]</button>
    </div>
</div>

@code {

    private ExistingLifePoint _lifePoint = null!; // is initialized on component construction
    private IJSObjectReference _lifePointDetailModule = null!; // is initialized on component construction
    private Uri? _imageUri;

    [Parameter]
    public string Id { get; set; } = null!; // is initialized on component construction

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        Logger.MethodStarted();

        _lifePoint = await LifePointService.GetLifePointAsync(Guid.Parse(Id));
        if (_lifePoint.ImageId != null) { _imageUri = ConstructImageUri(_lifePoint.ImageId.Value); }

        await LoadLifePointDetailModuleAsync();

        await base.OnInitializedAsync();

        Logger.MethodFinished();
    }

    private Uri ConstructImageUri(Guid imageId)
        => new(new Uri(Navigator.BaseUri), $"api/images/{_lifePoint.CreatedBy.Id}/{imageId.ToString()}");

    private async void OnDeleteClicked()
    {
        Logger.MethodStarted();

        await LifePointService.DeleteLifePointAsync(Guid.Parse(Id));
        await RemoveMarkerAsync();

        Logger.MethodFinished();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_imageUri == null && !firstRender) { await UpdatePopupAsync(); }
    }

    private async Task RemoveMarkerAsync()
        => await _lifePointDetailModule.InvokeVoidAsync("removeMarkerOfLifePoint", Id);

    private async Task LoadLifePointDetailModuleAsync()
        => _lifePointDetailModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/LifePointDetail.razor.js");

    /// <summary>Updates the underlying Leaflet popup so that size and position are correct and visible.</summary>
    /// <remarks>
    ///     Since the Blazor component is rendered lazily (and therefore after the Leaflet popup has been created),
    ///     the popup has to be updated manually. This will resize it according to the Blazor content and
    ///     also pan the map so that it becomes visible.
    ///     If an image is present, this must happen after the image is loaded - otherwise the calculated size of
    ///     the popup is wrong and would therefore be displayed at the wrong map position.
    /// </remarks>
    private async Task UpdatePopupAsync()
    {
        if (_lifePointDetailModule == null!) { return; } // due to unknown reasons, this really can happen 

        await _lifePointDetailModule.InvokeVoidAsync("updatePopup", Id);
    }

}