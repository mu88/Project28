@using BusinessServices.Services
@using DTO
@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime
@inject ILifePointService _lifePointService

<div id="mapid"></div>

@code {

    // Will be initialized on startup
#pragma warning disable 8618
    private IJSObjectReference _module;
    private IJSObjectReference _map;
#pragma warning restore 8618
    private List<ExistingLocation> _allLocations = new();
    private Dictionary<Guid, IJSObjectReference> _allMarkers = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMap();
            await DrawAllLocationsAsync();
        }
    }

    /// <inheritdoc />
    protected override Task OnInitializedAsync()
    {
        ReloadAllLocations();

        return base.OnInitializedAsync();
    }

    private void ReloadAllLocations()
    {
        _allLocations = _lifePointService.GetAllLocations().ToList();
    }

    private async Task InitializeMap()
    {
        _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./map.js");
        _map = await _module.InvokeAsync<IJSObjectReference>("initializeMap", 51.0405849, 13.7478431, 20);
    }

    private async Task DrawAllLocationsAsync()
    {
        foreach (var location in _allLocations) _allMarkers.Add(location.Id, await AddMarkerAsync(location));
    }

    private async ValueTask<IJSObjectReference> AddMarkerAsync(ExistingLocation location) =>
        await _module.InvokeAsync<IJSObjectReference>("addMarker", _map, location.Id, location.Longitude, location.Latitude);

    /// <inheritdoc />
    public async ValueTask DisposeAsync() => await _module.DisposeAsync();

}