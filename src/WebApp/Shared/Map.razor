@using BusinessServices.Services
@using DTO.Location
@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime
@inject ILifePointService _lifePointService
@inject IPersonService _personService

<div id="mapid"></div>

@code {

    // Will be initialized on startup
#pragma warning disable 8618
    private IJSObjectReference _mapModule;
    private IJSObjectReference _newLifePointModule;
    private IJSObjectReference _lifePointDetailModule;
#pragma warning restore 8618
    private IReadOnlyList<ExistingLocation> _allLocations = new List<ExistingLocation>();
    private DotNetObjectReference<Map>? _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await InitializeMapAsync(_objRef);
            await AddMarkersForExistingLocations();
        }
    }

    [JSInvokable]
    public async Task OpenPopupForNewLifePoint(double latitude, double longitude)
    {
        var popup = await CreatePopupAsync(latitude, longitude);
        await OpenPopupOnMapAsync(popup);
    }

    [JSInvokable]
    public async Task AddMarkerAsync(Guid id, double latitude, double longitude)
    {
        var marker = await _lifePointDetailModule.InvokeAsync<IJSObjectReference>("createMarkerForExistingLifePoint", id, latitude, longitude);
        await _mapModule.InvokeVoidAsync("addMarkerToMap", marker);
    }

    private async Task<IJSObjectReference> CreatePopupAsync(double latitude, double longitude) => await _newLifePointModule.InvokeAsync<IJSObjectReference>("createPopupForNewLifePoint", _objRef, latitude, longitude);

    private async Task OpenPopupOnMapAsync(IJSObjectReference popupReference) => await _mapModule.InvokeVoidAsync("openPopupOnMap", popupReference);

    private async Task InitializeMapAsync(DotNetObjectReference<Map> dotNetObjectReference)
    {
        _mapModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Map.razor.js");
        await _mapModule.InvokeVoidAsync("initializeMap", 51.0405849, 13.7478431, 20, dotNetObjectReference);

        _newLifePointModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/NewLifePoint.razor.js");
        _lifePointDetailModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/LifePointDetail.razor.js");
    }

    private async Task AddMarkersForExistingLocations()
    {
        foreach (var (latitude, longitude, id) in _lifePointService.GetAllLocations())
            await AddMarkerAsync(id, latitude, longitude);
    }

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
    // TODO mu88: Check if disposing is necessary with .NET 6 as it causes errors an app shutdown

    // ReSharper disable once ConditionIsAlwaysTrueOrFalse
    // Due to unknown reasons, this method will be called before _module could be loaded.
    // Maybe it is related to the preview nature of .NET 6
        if (_mapModule is not null) { await _mapModule.DisposeAsync(); }
        _objRef?.Dispose();
    }

}