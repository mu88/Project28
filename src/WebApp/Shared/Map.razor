@using Logging.Extensions
@using BusinessServices.Services
@using DTO.Location
@using DTO.Person
@using Persistence
@using Microsoft.Extensions.Logging
@inject IJSRuntime JsRuntime
@inject ILifePointService LifePointService
@inject IPersonService PersonService
@inject IUserService UserService
@inject IStringLocalizer<Main> Loc
@inject ILogger<Map> Logger

@if (!UserService.UserAlreadySet)
{
    <UserDialog OnClose="OnUserDialogClose"/>
}
<div>
    @if (false)
    {
        @if (_distinctCreators.Any())
        {
            <label for="distinctCreator">@Loc["CreatedBy"]: </label>
            <select id="distinctCreator" @onchange="SelectedCreatorChanged">
                @foreach (var (id, name) in _distinctCreators)
                {
                    <option value="@id">@name</option>
                }
            </select>
        }
        @if (_distinctYears.Any())
        {
            <label for="distinctYear">@Loc["CreatedIn"]: </label>
            <select id="distinctYear" @onchange="SelectedYearChanged">
                @foreach (var distinctYear in _distinctYears)
                {
                    <option value="@distinctYear">@distinctYear</option>
                }
            </select>
        }
    }
</div>

<div id="mapid"></div>

@code {

    // Will be initialized on startup
#pragma warning disable 8618
    private IJSObjectReference _mapModule;
    private IJSObjectReference _newLifePointModule;
    private IJSObjectReference _lifePointDetailModule;
    private IJSObjectReference _leafletMap;
#pragma warning restore 8618
    private IReadOnlyList<ExistingLocation> _allLocations = new List<ExistingLocation>();
    private DotNetObjectReference<Map>? _objRef;
    private IEnumerable<ExistingPerson> _distinctCreators = new List<ExistingPerson>();
    private IEnumerable<int> _distinctYears = new List<int>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.MethodStarted();
            _objRef = DotNetObjectReference.Create(this);
            await InitializeMapAsync(_objRef);
            await AddMarkersForExistingLocationsAsync();
            Logger.MethodFinished();
        }
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        Logger.MethodStarted();

        base.OnInitialized();

        _distinctCreators = LifePointService.GetDistinctCreators();
        _distinctYears = LifePointService.GetDistinctYears();

        Logger.MethodFinished();
    }

    [JSInvokable]
    public async Task OpenPopupForNewLifePointAsync(double latitude, double longitude)
    {
        Logger.MethodStarted();
        await _newLifePointModule.InvokeVoidAsync("createPopupForNewLifePoint", _objRef, _leafletMap, latitude, longitude);
        Logger.MethodFinished();
    }

    [JSInvokable]
    public async Task AddMarkerAsync(Guid id, double latitude, double longitude)
        => await _lifePointDetailModule.InvokeVoidAsync("createMarkerForExistingLifePoint", _leafletMap, id, latitude, longitude);

    private async Task InitializeMapAsync(DotNetObjectReference<Map> dotNetObjectReference)
    {
        _mapModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Map.razor.js");
        _leafletMap = await _mapModule.InvokeAsync<IJSObjectReference>("initializeMap", 51.0405849, 13.7478431, 20, dotNetObjectReference);

        _newLifePointModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/NewLifePoint.razor.js");
        _lifePointDetailModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/LifePointDetail.razor.js");
    }

    private async Task AddMarkersForExistingLocationsAsync()
    {
        Logger.MethodStarted();

        foreach (var (latitude, longitude, id) in LifePointService.GetAllLocations()) await AddMarkerAsync(id, latitude, longitude);

        Logger.MethodFinished();
    }

    private void SelectedCreatorChanged(ChangeEventArgs args)
    {
    // TODO mu88: Redraw
    }

    private void SelectedYearChanged(ChangeEventArgs args)
    {
    // TODO mu88: Redraw
    }

    private void OnUserDialogClose() => StateHasChanged();

}