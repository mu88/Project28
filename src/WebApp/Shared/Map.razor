@using BusinessServices.Services
@using DTO.Location
@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime
@inject ILifePointService _lifePointService
@inject IPersonService _personService

<div id="mapid"></div>

@code {

    // Will be initialized on startup
#pragma warning disable 8618
    private IJSObjectReference _module;
#pragma warning restore 8618
    private IReadOnlyList<ExistingLocation> _allLocations = new List<ExistingLocation>();
    private Dictionary<Guid, IJSObjectReference> _allMarkers = new();
    private DotNetObjectReference<Map>? _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await InitializeMap(_objRef);
            await RedrawAllLocationsAsync();
        }
    }

    /// <inheritdoc />
    protected override Task OnInitializedAsync()
    {
        ReloadAllLocations();

        return base.OnInitializedAsync();
    }

    private void ReloadAllLocations() => _allLocations = _lifePointService.GetAllLocations().ToList();

    private async Task InitializeMap(DotNetObjectReference<Map> dotNetObjectReference)
    {
        _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Map.razor.js");
        await _module.InvokeVoidAsync("initializeMap", 51.0405849, 13.7478431, 20, dotNetObjectReference);
    }

    private async Task RedrawAllLocationsAsync()
    {
    // TODO mu88: Delete existing markers from map
        _allMarkers.Clear();

        foreach (var location in _allLocations)
            _allMarkers.Add(location.Id, await AddMarkerAsync(location));
    }

    private async ValueTask<IJSObjectReference> AddMarkerAsync(ExistingLocation location) =>
        await _module.InvokeAsync<IJSObjectReference>("addMarker", location.Id, location.Latitude, location.Longitude);

    [JSInvokable]
    public async Task ReloadAndDrawAllLocationsAsync()
    {
        ReloadAllLocations();
        await RedrawAllLocationsAsync();
    }

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
    // TODO mu88: Check if disposing is necessary with .NET 6 as it causes errors an app shutdown

    // ReSharper disable once ConditionIsAlwaysTrueOrFalse
    // Due to unknown reasons, this method will be called before _module could be loaded.
    // Maybe it is related to the preview nature of .NET 6
        if (_module is not null) { await _module.DisposeAsync(); }
        _objRef?.Dispose();
    }

}