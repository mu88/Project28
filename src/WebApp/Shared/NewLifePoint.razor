@using BusinessServices.Services
@using DTO.LifePoint
@using Persistence
@using WebApp.Models
@inject ILifePointService _lifePointService
@inject IPersonService _personService
@inject IJSRuntime _jsRuntime
@inject IUserService _userService

@if (_showModalSpinner)
{
    <div class="spinner-border"></div>
    <div>Saving...</div>
}
else
{
    <EditForm Model="@_newLifePoint" OnValidSubmit="@CreateNewLifePointAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <label for="caption">Caption</label>
        <InputText id="caption" @bind-Value="_newLifePoint.Caption"/>
        <label for="date">Date</label>
        <InputDate id="date" @bind-Value="_newLifePoint.Date"/>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="_newLifePoint.Description"/>
        <label for="image">Image</label>
        <InputFile id="image" OnChange="@LoadImage" accept=".jpg,.jpeg,.png"/>

        <button type="submit">Submit</button>
    </EditForm>
}

@code {

    private readonly NewLifePointModel _newLifePoint = new();
    private IJSObjectReference _newLifePointModule = null!; // is initialized on component construction 
    private IBrowserFile? _file;
    private bool _showModalSpinner;
        private const long MaxAllowedFileSizeInBytes = 15 * 1024 * 1024; // 15 MB

    [Parameter]
    public double Latitude { get; set; }

    [Parameter]
    public double Longitude { get; set; }

    private async Task CreateNewLifePointAsync()
    {
        EnableSpinner();

        var imageToCreate = _file != null ? new ImageToCreate(_file.OpenReadStream(MaxAllowedFileSizeInBytes)) : null;
        var lifePointToCreate = new LifePointToCreate(
            _newLifePoint.Date,
            _newLifePoint.Caption,
            _newLifePoint.Description,
            Latitude,
            Longitude,
            _userService.Id ?? throw new NullReferenceException("User has not been set"),
            imageToCreate);

        var createdLifePoint = await _lifePointService.CreateLifePointAsync(lifePointToCreate);

        DisableSpinner();

        await RemovePopupAsync();
        await AddMarkerAsync(createdLifePoint);
    }

    private void EnableSpinner()
    {
        _showModalSpinner = true;
        StateHasChanged();
    }

    private void DisableSpinner()
    {
        _showModalSpinner = false;
        StateHasChanged();
    }

    private async Task RemovePopupAsync() => await _newLifePointModule.InvokeVoidAsync("removePopupForNewLifePoint");

    private async Task AddMarkerAsync(ExistingLifePoint existingLifePoint) =>
        await _newLifePointModule.InvokeVoidAsync("addMarkerForCreatedLifePoint", existingLifePoint.Id, existingLifePoint.Latitude, existingLifePoint.Longitude);

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await LoadNewLifePointModuleAsync();

        await base.OnInitializedAsync();
    }

    private async Task LoadNewLifePointModuleAsync() => _newLifePointModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/NewLifePoint.razor.js");

    private void LoadImage(InputFileChangeEventArgs args) => _file = args.File;

}