@using Logging.Extensions
@using BusinessServices.Services
@using DTO.LifePoint
@using Persistence
@using WebApp.Services
@using Microsoft.Extensions.Logging
@using WebApp.Models
@using System.IO
@inject ILifePointService _lifePointService
@inject IJSRuntime _jsRuntime
@inject IUserService _userService
@inject INewLifePointDateService _newLifePointDateService
@inject IStringLocalizer<Main> _loc
@inject ILogger<LifePointDetail> _logger

@if (_showModalSpinner)
{
    <button class="btn btn-outline-secondary" type="button" disabled>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        @_loc["Saving"]...
    </button>
}
else
{
    @if (ImageTooBig)
    {
        <div class="alert alert-warning" role="alert">
            @_loc["ImageTooBig", MaxAllowedFileSizeInMegaBytes]
        </div>
    }

    <EditForm Model="@_newLifePoint" OnValidSubmit="@CreateNewLifePointAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="input-group mb-3">
            <span class="input-group-text" id="caption">@_loc["Caption"]</span>
            <InputText class="form-control" id="input-caption" aria-describedby="caption" @bind-Value="_newLifePoint.Caption"/>
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text" id="date">@_loc["Date"]</span>
            <InputDate class="form-control" id="input-date" aria-describedby="date" @bind-Value="_newLifePoint.Date"/>
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text" id="description">@_loc["Description"]</span>
            <InputTextArea class="form-control" id="input-description" aria-describedby="description" @bind-Value="_newLifePoint.Description"/>
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text" id="image">@_loc["Image"]</span>
            <InputFile class="form-control" id="input-file" aria-describedby="image" OnChange="@LoadImage" accept=".jpg,.jpeg,.png"/>
        </div>
        <button class="btn btn-outline-secondary" type="submit">@_loc["Save"]</button>
    </EditForm>
}

@code {

    private readonly NewLifePointModel _newLifePoint = new();
    private IJSObjectReference _newLifePointModule = null!; // is initialized on component construction 
    private IBrowserFile? _file;
    private bool _showModalSpinner;
    internal bool ImageTooBig;
        internal const long MaxAllowedFileSizeInBytes = MaxAllowedFileSizeInMegaBytes * 1024 * 1024;
        private const long MaxAllowedFileSizeInMegaBytes = 15;

    [Parameter]
    public double Latitude { get; set; }

    [Parameter]
    public double Longitude { get; set; }

    private async Task CreateNewLifePointAsync()
    {
        _logger.MethodStarted();

        EnableSpinner();

        ImageToCreate? imageToCreate;
        try
        {
            ImageTooBig = false;
            imageToCreate = _file != null ? new ImageToCreate(_file.OpenReadStream(MaxAllowedFileSizeInBytes)) : null;
        }
        catch (IOException)
        {
            _logger.ImageTooBig();
            DisableSpinner();
            ImageTooBig = true;
            return;
        }
        var lifePointToCreate = new LifePointToCreate(
            _newLifePoint.Date,
            _newLifePoint.Caption,
            _newLifePoint.Description,
            Latitude,
            Longitude,
            _userService.Id ?? throw new NullReferenceException(_loc["UserHasNotBeenSet"]),
            imageToCreate);

        var createdLifePoint = await _lifePointService.CreateLifePointAsync(lifePointToCreate);
        _newLifePointDateService.ProposedCreationDate = _newLifePoint.Date;

        DisableSpinner();

        await RemovePopupAsync();
        await AddMarkerAsync(createdLifePoint);

        _logger.MethodFinished();
    }

    private void EnableSpinner()
    {
        _showModalSpinner = true;
        StateHasChanged();
    }

    private void DisableSpinner()
    {
        _showModalSpinner = false;
        StateHasChanged();
    }

    private async Task RemovePopupAsync()
    {
        _logger.MethodStarted();

        await _newLifePointModule.InvokeVoidAsync("removePopupForNewLifePoint");

        _logger.MethodFinished();
    }

    private async Task AddMarkerAsync(ExistingLifePoint existingLifePoint)
    {
        _logger.MethodStarted();

        await _newLifePointModule.InvokeVoidAsync("addMarkerForCreatedLifePoint", existingLifePoint.Id, existingLifePoint.Latitude, existingLifePoint.Longitude);

        _logger.MethodFinished();
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await LoadNewLifePointModuleAsync();

        await base.OnInitializedAsync();

        _newLifePoint.Date = _newLifePointDateService.ProposedCreationDate;
    }

    private async Task LoadNewLifePointModuleAsync() =>
        _newLifePointModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/NewLifePoint.razor.js");

    private void LoadImage(InputFileChangeEventArgs args) => _file = args.File;

}